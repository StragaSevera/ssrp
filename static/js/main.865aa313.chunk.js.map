{"version":3,"sources":["components/TableGrid.module.scss","components/ImageComponent.module.scss","App.module.css","components/Info.module.scss","components/ImageComponent.tsx","const/Stores.ts","const/ComponentBrand.ts","planner/Component.ts","planner/components/EmptyComponent.ts","planner/components/ReactorComponent.ts","planner/components/abstract/UraniumCell.ts","planner/components/UraniumCellSingle.ts","planner/components/CoolantCell20k.ts","planner/components/HeatVent.ts","planner/components/UraniumCellDouble.ts","components/Palette.tsx","components/Grid.tsx","components/Info.tsx","components/MainArea.tsx","App.tsx","serviceWorker.ts","planner/Reactor.ts","planner/ReactorStore.ts","components/StoreComponent.tsx","index.tsx"],"names":["module","exports","table_grid","img_component","img_container","selected_high","selected_medium","selected_low","app","info","ImageSelection","Stores","getClassNames","props","result","styles","selected","push","join","getBarURI","bar","id","Math","ceil","concat","ComponentBrand","ImageComponent","uri","brand","toString","react","style","backgroundImage","className","src","alt","Component","_dec","observable","struct","_class","reactor","x","y","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","reactorComponent","coords","createClass","key","value","heat","isHeatable","Error","nextHeat","currentHeat","tick","finalizeTick","get","getNeighbours","maxHeat","applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","EmptyComponent","EmptyComponent_class","_Component","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","inherits","ReactorComponent","ReactorComponent_class","ReactorComponent_descriptor","assertThisInitialized","ReactorComponent_descriptor2","eu","nextEU","esm_get","currentEU","UraniumCell","UraniumCell_class","UraniumCell_descriptor","neighbours","pulses","filter","n","isReflector","floor","arity","_this$getEUHeat","getEUHeat","addNextEU","heatableNeighbours","addNextHeat","heatPerNeighbour","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","UraniumCellSingle","_UraniumCell","CoolantCell20k","CoolantCell20k_class","HeatVent","HeatVent_class","lowerNextHeat","UraniumCellDouble","ComponentDict","_ComponentDict","defineProperty","ComponentListFiltered","keys","Palette","inject","Palette_dec","Palette_class","_React$Component","store","brandGrid","rowSize","pickComponent","selectedComponent","setState","selectedX","selectedY","isSelected","state","source","count","row","i","matrixify","_this2","map","col","onClick","ImageComponent_ImageComponent","high","React","Grid","Grid_dec","Grid_class","observer","changeCell","setComponentClass","recount","component","low","medium","grid","getSelection","heatRatio","Info","Info_dec","Info_class","type","MainArea","Grid_Grid","Info_Info","App","MainArea_MainArea","Palette_Palette","Boolean","window","location","hostname","match","Reactor","Reactor_class","chambers","gridRows","defaultGridCols","gridCols","Reactor_descriptor","Reactor_descriptor2","runInAction","isWrongCoords","getComponent","setComponent","c","_this3","getNeighbourCoords","comp","components","forEach","refresh","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","ReactorStore","ReactorStore_dec","bound","_dec2","ReactorStore_class","ReactorStore_descriptor","StoreComponent","index_module","children","configure","enforceActions","ReactDOM","render","react_default","a","createElement","StoreComponent_StoreComponent","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,WAAA,mDCAlBF,EAAAC,QAAA,CAAkBE,cAAA,sCAAAC,cAAA,sCAAAC,cAAA,sCAAAC,gBAAA,wCAAAC,aAAA,0DCAlBP,EAAAC,QAAA,CAAkBO,IAAA,sCCAlBR,EAAAC,QAAA,CAAkBQ,KAAA,yHCINC,uHCLCC,EACJ,yBDoBT,SAASC,EAAcC,GACrB,IAAMC,EAAmB,CAACC,IAAOZ,eAIjC,OAHIU,EAAMG,UACRF,EAAOG,KAAKF,IAAOF,EAAMG,WAEpBF,EAAOI,KAAK,KAGrB,SAASC,EAAUC,GACjB,IAAMC,EAAKC,KAAKC,KAAW,GAANH,GACrB,mBAAAI,OAAoBH,EAAK,GAAKA,EAAK,GAAnC,kBA1BUX,sFA6BL,kCE1BKe,EF0BCC,EAAiD,SAAAb,GAC5D,IAAMc,EAjBC,qBAiBiBd,EAAMe,MAjBMC,WAAa,OAkBjD,OAAIF,EACEd,EAAMO,KAAOP,EAAMO,IAAM,EAEzBU,EAAA,qBACEC,MAAO,CACLC,gBAAe,OAAAR,OAASG,EAAT,MAEjBM,UAAWlB,IAAOX,eAElB0B,EAAA,qBAAKI,IAAKf,EAAUN,EAAMO,KAAMe,IAAKtB,EAAMe,SAIxCE,EAAA,qBAAKI,IAAKP,EAAKQ,IAAKtB,EAAMe,MAAOK,UAAWrB,EAAcC,KAG5D,2CG9CEuB,GAAbC,EAOGC,IAAWC,OAPdC,EAAA,WAaE,SAAAJ,EAAYK,EAAkBC,EAAWC,GAAYC,OAAAC,EAAA,EAAAD,CAAAE,KAAAV,GAAAQ,OAAAG,EAAA,EAAAH,CAAAE,KAAA,QAAAE,EAAAF,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,cAAAG,EAAAH,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,WAAAI,EAAAJ,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,SAAAK,EAAAL,WAH7CL,aAG4C,EAAAK,KAF1CM,sBAE0C,EAClDN,KAAKL,QAAUA,EACfK,KAAKM,iBAAmBX,EAAQW,iBAChCN,KAAKO,OAAS,CAAEX,IAAGC,KAhBvB,OAAAC,OAAAU,EAAA,EAAAV,CAAAR,EAAA,EAAAmB,IAAA,cAAAC,MAAA,SAwBqBC,GACjB,IAAKX,KAAKY,WACR,MAAM,IAAIC,MAAJ,oCAAAnC,OAA8CsB,KAAKlB,MAAMC,aAEjEiB,KAAKc,UAAYH,IA5BrB,CAAAF,IAAA,gBAAAC,MAAA,SAgCuBC,GACnB,IAAKX,KAAKY,WACR,MAAM,IAAIC,MAAJ,oCAAAnC,OAA8CsB,KAAKlB,MAAMC,aAEjEiB,KAAKc,UAAYH,IApCrB,CAAAF,IAAA,eAAAC,MAAA,WA0DIV,KAAKe,aAAef,KAAKc,SACzBd,KAAKc,SAAW,EACZd,KAAKe,YAAc,IAAGf,KAAKe,YAAc,KA5DjD,CAAAN,IAAA,OAAAC,MAAA,eAAAD,IAAA,WAAAC,MAAA,WAmEIV,KAAKgB,OACLhB,KAAKiB,iBApET,CAAAR,IAAA,UAAAC,MAAA,WAyEIV,KAAKe,YAAc,EACnBf,KAAKc,SAAW,IA1EpB,CAAAL,IAAA,aAAAS,IAAA,WAoBI,OAAOlB,KAAKL,QAAQwB,cAAcnB,KAAKO,OAAOX,EAAGI,KAAKO,OAAOV,KApBjE,CAAAY,IAAA,aAAAS,IAAA,WAwCI,OAAwB,IAAjBlB,KAAKoB,UAxChB,CAAAX,IAAA,UAAAS,IAAA,WA4CI,OAAO,IA5CX,CAAAT,IAAA,YAAAS,IAAA,WAgDI,IAAME,EAAUpB,KAAKoB,QACrB,OAAmB,IAAZA,EAAgB,EAAIpB,KAAKe,YAAcK,IAjDlD,CAAAX,IAAA,cAAAS,IAAA,WAqDI,OAAO,MArDX5B,EAAA,GAAAY,EAAAJ,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,SACG9B,KADH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAAvB,EAAAL,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,eAGG9B,KAHH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAI+B,KAJ/BtB,EAAAN,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,YAKG9B,KALH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAM4B,KAN5BrB,EAAAP,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,UAAA/B,GAAA,CAAAgC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAA5B,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,eAuBGK,KAvBH7B,OAAA8B,yBAAAlC,EAAA4B,UAAA,eAAA5B,EAAA4B,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,iBA+BGK,KA/BH7B,OAAA8B,yBAAAlC,EAAA4B,UAAA,iBAAA5B,EAAA4B,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,gBAwDGK,KAxDH7B,OAAA8B,yBAAAlC,EAAA4B,UAAA,gBAAA5B,EAAA4B,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,YAiEGK,KAjEH7B,OAAA8B,yBAAAlC,EAAA4B,UAAA,YAAA5B,EAAA4B,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA4B,UAAA,WAuEGK,KAvEH7B,OAAA8B,yBAAAlC,EAAA4B,UAAA,WAAA5B,EAAA4B,WAAA5B,GCFamC,GAAbC,EAAA,SAAAC,GAAA,SAAAF,IAAA,IAAAG,EAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,GAAA,QAAAK,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,MAAAgC,EAAAlC,OAAA2C,EAAA,EAAA3C,CAAA+B,IAAAa,KAAAC,MAAAX,EAAA,CAAAhC,MAAAtB,OAAA2D,MACSvD,MAAQH,EAAekD,eADhCI,EAAA,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAA+B,EAAAE,GAAAjC,OAAAU,EAAA,EAAAV,CAAA+B,EAAA,EAAApB,IAAA,OAAAC,MAAA,gBAAAmB,EAAA,CAAoCvC,GAApCQ,OAAAuB,EAAA,GAAAS,EAAAR,UAAA,QAGGK,KAHH7B,OAAA8B,yBAAAE,EAAAR,UAAA,QAAAQ,EAAAR,WAAAQ,mBCAae,GAAbC,EAAA,SAAAf,GAAA,SAAAc,IAAA,IAAAb,EAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6C,GAAA,QAAAX,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,MAAAgC,EAAAlC,OAAA2C,EAAA,EAAA3C,CAAA+C,IAAAH,KAAAC,MAAAX,EAAA,CAAAhC,MAAAtB,OAAA2D,MACSvD,MAAQH,EAAekE,iBADhC/C,OAAAG,EAAA,EAAAH,CAAAmC,EAAA,YAAAc,EAAAjD,OAAAkD,EAAA,EAAAlD,QAAAkD,EAAA,EAAAlD,CAAAmC,KAAAnC,OAAAG,EAAA,EAAAH,CAAAmC,EAAA,SAAAgB,EAAAnD,OAAAkD,EAAA,EAAAlD,QAAAkD,EAAA,EAAAlD,CAAAmC,OAAA,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAA+C,EAAAd,GAAAjC,OAAAU,EAAA,EAAAV,CAAA+C,EAAA,EAAApC,IAAA,OAAAC,MAAA,eAAAD,IAAA,YAAAC,MAAA,SAmBmBwC,GACflD,KAAKmD,QAAUD,IApBnB,CAAAzC,IAAA,eAAAC,MAAA,WAyBIZ,OAAAsD,EAAA,EAAAtD,QAAA2C,EAAA,EAAA3C,CAAA+C,EAAAvB,WAAA,eAAAtB,MAAA0C,KAAA1C,MACAA,KAAKqD,WAAarD,KAAKmD,OACvBnD,KAAKmD,OAAS,IA3BlB,CAAA1C,IAAA,UAAAC,MAAA,WAgCIZ,OAAAsD,EAAA,EAAAtD,QAAA2C,EAAA,EAAA3C,CAAA+C,EAAAvB,WAAA,UAAAtB,MAAA0C,KAAA1C,MACAA,KAAKmD,OAAS,EACdnD,KAAKqD,UAAY,IAlCrB,CAAA5C,IAAA,aAAAS,IAAA,WAWI,MAAM,IAAIL,MAAM,wDAXpB,CAAAJ,IAAA,UAAAS,IAAA,WAeI,OAAO,SAfX2B,EAAA,CAAsCvD,GAAtCyD,EAAAjD,OAAAuB,EAAA,EAAAvB,CAAAgD,EAAAxB,UAAA,aAEG9B,KAFH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAG6B,KAH7BuB,EAAAnD,OAAAuB,EAAA,EAAAvB,CAAAgD,EAAAxB,UAAA,UAIG9B,KAJH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAK0B,KAL1B5B,OAAAuB,EAAA,EAAAvB,CAAAgD,EAAAxB,UAAA,QAOGK,KAPH7B,OAAA8B,yBAAAkB,EAAAxB,UAAA,QAAAwB,EAAAxB,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAgD,EAAAxB,UAAA,aAkBGK,KAlBH7B,OAAA8B,yBAAAkB,EAAAxB,UAAA,aAAAwB,EAAAxB,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAgD,EAAAxB,UAAA,gBAuBGK,KAvBH7B,OAAA8B,yBAAAkB,EAAAxB,UAAA,gBAAAwB,EAAAxB,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAgD,EAAAxB,UAAA,WA8BGK,KA9BH7B,OAAA8B,yBAAAkB,EAAAxB,UAAA,WAAAwB,EAAAxB,WAAAwB,GCKaQ,GAAbC,EAAA,SAAAxB,GAAA,SAAAuB,IAAA,IAAAtB,EAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,GAAA,QAAApB,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,MAAAgC,EAAAlC,OAAA2C,EAAA,EAAA3C,CAAAwD,IAAAZ,KAAAC,MAAAX,EAAA,CAAAhC,MAAAtB,OAAA2D,KAAAvC,OAAAG,EAAA,EAAAH,CAAAmC,EAAA,QAAAuB,EAAA1D,OAAAkD,EAAA,EAAAlD,QAAAkD,EAAA,EAAAlD,CAAAmC,OAAA,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAAwD,EAAAvB,GAAAjC,OAAAU,EAAA,EAAAV,CAAAwD,EAAA,EAAA7C,IAAA,YAAAC,MAAA,SAQoB+C,GAChB,IACMC,EAAS,EADaD,EAAWE,OAAO,SAAAC,GAAC,OAAIA,EAAEC,cACdzB,OAAS5D,KAAKsF,MAAM9D,KAAK+D,MAAQ,GACxE,MAAO,CACLb,GAAI,EAAIlD,KAAK+D,MAAQL,EACrB/C,KAAM,EAAIX,KAAK+D,MAAQL,GAAUA,EAAS,MAbhD,CAAAjD,IAAA,OAAAC,MAAA,WAuBI,IAAM+C,EAAazD,KAAKyD,WADNO,EAEGhE,KAAKiE,UAAUR,GAA5BP,EAFUc,EAEVd,GAAIvC,EAFMqD,EAENrD,KAEZX,KAAKM,iBAAiB4D,UAAUhB,GAEhC,IAAMiB,EAAqBV,EAAWE,OAAO,SAAAC,GAAC,OAAIA,EAAEhD,aACpD,GAAkC,IAA9BuD,EAAmB/B,OACrBpC,KAAKM,iBAAiB8D,YAAYzD,OAC7B,CACL,IAAM0D,EAAmB7F,KAAKsF,MAAMnD,EAAOwD,EAAmB/B,QADzDkC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEL,QAAAC,EAAAC,EAAwBR,EAAxBS,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA4C,CAAAI,EAAAhE,MAChC0D,YAAYC,IAHnB,MAAAW,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAK,EAAAM,QAAAN,EAAAM,SAAA,WAAAV,EAAA,MAAAC,GAKLL,EAAmB,GAAGC,YAAYzD,EAAOwD,EAAmB/B,WApClE,CAAA3B,IAAA,QAAAS,IAAA,WAKI,MAAM,IAAIL,MAAM,4CALpB,CAAAJ,IAAA,cAAAS,IAAA,WAkBI,OAAO,MAlBXoC,EAAA,CAAiChE,GAAjCkE,EAAA1D,OAAAuB,EAAA,EAAAvB,CAAAyD,EAAAjC,UAAA,SACG9B,KADH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAA5B,OAAAuB,EAAA,EAAAvB,CAAAyD,EAAAjC,UAAA,QAqBGK,KArBH7B,OAAA8B,yBAAA2B,EAAAjC,UAAA,QAAAiC,EAAAjC,WAAAiC,GCNa2B,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAlD,EAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkF,GAAA,QAAAhD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,MAAAgC,EAAAlC,OAAA2C,EAAA,EAAA3C,CAAAoF,IAAAxC,KAAAC,MAAAX,EAAA,CAAAhC,MAAAtB,OAAA2D,MACSvD,MAAQH,EAAeuG,kBADhCjD,EAAA,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAAoF,EAAAC,GAAArF,OAAAU,EAAA,EAAAV,CAAAoF,EAAA,EAAAzE,IAAA,QAAAS,IAAA,WAII,OAAO,IAJX,CAAAT,IAAA,cAAAS,IAAA,WAQI,OAAO,MARXgE,EAAA,CAAuC5B,GCC1B8B,GAAbC,EAAA,SAAAtD,GAAA,SAAAqD,IAAA,IAAApD,EAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoF,GAAA,QAAAlD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,MAAAgC,EAAAlC,OAAA2C,EAAA,EAAA3C,CAAAsF,IAAA1C,KAAAC,MAAAX,EAAA,CAAAhC,MAAAtB,OAAA2D,MACSvD,MAAQH,EAAeyG,eADhCnD,EAAA,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAAsF,EAAArD,GAAAjC,OAAAU,EAAA,EAAAV,CAAAsF,EAAA,EAAA3E,IAAA,OAAAC,MAAA,eAAAD,IAAA,UAAAS,IAAA,WAII,OAAO,QAJXkE,EAAA,CAAoC9F,GAApCQ,OAAAuB,EAAA,GAAAgE,EAAA/D,UAAA,QAOGK,KAPH7B,OAAA8B,yBAAAyD,EAAA/D,UAAA,QAAA+D,EAAA/D,WAAA+D,GCAaC,GAAbC,EAAA,SAAAxD,GAAA,SAAAuD,IAAA,IAAAtD,EAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsF,GAAA,QAAApD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,MAAAgC,EAAAlC,OAAA2C,EAAA,EAAA3C,CAAAwF,IAAA5C,KAAAC,MAAAX,EAAA,CAAAhC,MAAAtB,OAAA2D,MACSvD,MAAQH,EAAe2G,SADhCrD,EAAA,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAAwF,EAAAvD,GAAAjC,OAAAU,EAAA,EAAAV,CAAAwF,EAAA,EAAA7E,IAAA,OAAAC,MAAA,WASIV,KAAKwF,cAAc,KATvB,CAAA/E,IAAA,UAAAS,IAAA,WAII,OAAO,QAJXoE,EAAA,CAA8BhG,GAA9BQ,OAAAuB,EAAA,GAAAkE,EAAAjE,UAAA,QAOGK,KAPH7B,OAAA8B,yBAAA2D,EAAAjE,UAAA,QAAAiE,EAAAjE,WAAAiE,GCDaE,EAAb,SAAAN,GAAA,SAAAM,IAAA,IAAAzD,EAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyF,GAAA,QAAAvD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,MAAAgC,EAAAlC,OAAA2C,EAAA,EAAA3C,CAAA2F,IAAA/C,KAAAC,MAAAX,EAAA,CAAAhC,MAAAtB,OAAA2D,MACSvD,MAAQH,EAAe8G,kBADhCxD,EAAA,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAA2F,EAAAN,GAAArF,OAAAU,EAAA,EAAAV,CAAA2F,EAAA,EAAAhF,IAAA,QAAAS,IAAA,WAII,OAAO,IAJX,CAAAT,IAAA,cAAAS,IAAA,WAQI,OAAO,MARXuE,EAAA,CAAuCnC,aRK3B3E,+NAYL,OAAM+G,IAA6BC,EAAA,GAAA7F,OAAA8F,EAAA,EAAA9F,CAAA6F,EACvChH,EAAekD,eAAiBA,GADO/B,OAAA8F,EAAA,EAAA9F,CAAA6F,EAEvChH,EAAekE,iBAAmBA,GAFK/C,OAAA8F,EAAA,EAAA9F,CAAA6F,EAGvChH,EAAeuG,kBAAoBA,GAHIpF,OAAA8F,EAAA,EAAA9F,CAAA6F,EAIvChH,EAAe8G,kBAAoBA,GAJI3F,OAAA8F,EAAA,EAAA9F,CAAA6F,EAKvChH,EAAe2G,SAAWA,GALaxF,OAAA8F,EAAA,EAAA9F,CAAA6F,EAMvChH,EAAeyG,eAAiBA,GANOO,GAS7BE,GAA2C/F,OAAOgG,KAC7DJ,IACqB/B,OAAO,SAAA7E,GAAK,OAAIA,IAAUH,EAAekE,mBSHzD,mBAAMkD,GADZC,YAAOnI,EACRoI,CAAAC,GAAA,SAAAC,GAKE,SAAAJ,EAAYhI,GAA0B,IAAAkE,EAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IACpC9D,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAAiG,GAAArD,KAAA1C,KAAMjC,KALAqI,WAI8B,EAAAnE,EAHrBoE,eAGqB,EAAApE,EAFrBqE,QAAkB,EAEGrE,EAO9BsE,cAAgB,SAAC3G,EAAWC,GAClC,OAAO,WACLoC,EAAKmE,MAAMI,kBAAoBvE,EAAKoE,UAAUxG,GAAGD,GACjDqC,EAAKwE,SAAS,CAAEC,UAAW9G,EAAG+G,UAAW9G,MAVPoC,EAc9B2E,WAAa,SAAChH,EAAWC,GAC/B,OAAOoC,EAAK4E,MAAMH,YAAc9G,GAAKqC,EAAK4E,MAAMF,YAAc9G,GAb9DoC,EAAKmE,MAAQrI,EAAMqI,MACnBnE,EAAKoE,UAvBT,SAAsBS,EAAaC,GAGjC,IAFA,IAAM/I,EAAgB,GAClBgJ,EAAW,GACNC,EAAI,EAAGA,EAAIH,EAAO1E,OAAQ6E,IACjCD,EAAI7I,KAAK2I,EAAOG,IACZA,EAAIF,IAAUA,EAAQ,IACxB/I,EAAOG,KAAK6I,GACZA,EAAM,IAIV,OADmB,IAAfA,EAAI5E,QAAcpE,EAAOG,KAAK6I,GAC3BhJ,EAYYkJ,CAA0BrB,GAAuB5D,EAAKqE,SACvErE,EAAK4E,MAAQ,CAAEH,UAAW,EAAGC,UAAW,GAJJ1E,EALxC,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAAiG,EAAAI,GAAArG,OAAAU,EAAA,EAAAV,CAAAiG,EAAA,EAAAtF,IAAA,SAAAC,MAAA,WAuBkB,IAAAyG,EAAAnH,KACd,OACEhB,EAAA,uBAAOG,UAAWlB,IAAOb,YACvB4B,EAAA,2BACGgB,KAAKqG,UAAUe,IAAI,SAACJ,EAAKnH,GAAN,OAClBb,EAAA,oBAAIyB,IAAKZ,GACNmH,EAAII,IAAI,SAACC,EAAKzH,GAAN,OACPZ,EAAA,oBAAIyB,IAAKb,EAAG0H,QAASH,EAAKZ,cAAc3G,EAAGC,IACzCb,EAAA,cAACuI,EAAD,CAAgBzI,MAAOuI,EAAKnJ,SAAUiJ,EAAKP,WAAWhH,EAAGC,GAAKjC,EAAe4J,UAAO/C,gBA/BtGsB,EAAA,CAA6B0B,eAA7BvB,GClBawB,GAFZ1B,YAAOnI,EAER8J,CAAAC,GADCC,YACDD,GAAA,SAAAzB,GAGE,SAAAuB,EAAY3J,GAA0B,IAAAkE,EAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0H,IACpCzF,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAA4H,GAAAhF,KAAA1C,KAAMjC,KAHAqI,WAE8B,EAAAnE,EAK9B6F,WAAa,SAAClI,EAAWC,GAC/B,OAAO,WACLoC,EAAKmE,MAAMzG,QAAQoI,kBAAkBnI,EAAGC,EAAGoC,EAAKmE,MAAMI,mBACtDvE,EAAKmE,MAAM4B,YANb/F,EAAKmE,MAAQrI,EAAMqI,MAFiBnE,EAHxC,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAA4H,EAAAvB,GAAArG,OAAAU,EAAA,EAAAV,CAAA4H,EAAA,EAAAjH,IAAA,eAAAC,MAAA,SAeuBuH,GACnB,OAA8B,IAA1BA,EAAUlH,iBACZ,EACSkH,EAAUlH,YAAc,GAC1BnD,EAAesK,IACbD,EAAUlH,YAAc,IAC1BnD,EAAeuK,OAEfvK,EAAe4J,OAvB5B,CAAA/G,IAAA,SAAAC,MAAA,WA2BkB,IAAAyG,EAAAnH,KACd,OACEhB,EAAA,uBAAOG,UAAWlB,IAAOb,YACvB4B,EAAA,2BACGgB,KAAKoG,MAAMzG,QAAQyI,KAAKhB,IAAI,SAACJ,EAAKnH,GAAN,OAC3Bb,EAAA,oBAAIyB,IAAKZ,EAAI,GACVmH,EAAII,IAAI,SAACC,EAAKzH,GAAN,OACPZ,EAAA,oBAAIyB,IAAKb,EAAI,EAAG0H,QAASH,EAAKW,WAAWlI,EAAI,EAAGC,EAAI,IAClDb,EAAA,cAACuI,EAAD,CAAgBzI,MAAOuI,EAAIvI,MAAOZ,SAAUiJ,EAAKkB,aAAahB,GAAM/I,IAAK+I,EAAIiB,wBAnC/FZ,EAAA,CAA0BD,eAA1BG,4BCFaW,GAFZvC,YAAOnI,EAER2K,CAAAC,GADCZ,YACDY,GAAA,SAAAtC,GAGE,SAAAoC,EAAYxK,GAA0B,IAAAkE,EAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuI,IACpCtG,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAAyI,GAAA7F,KAAA1C,KAAMjC,KAHAqI,WAE8B,EAEpCnE,EAAKmE,MAAQrI,EAAMqI,MAFiBnE,EAHxC,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAAyI,EAAApC,GAAArG,OAAAU,EAAA,EAAAV,CAAAyI,EAAA,EAAA9H,IAAA,SAAAC,MAAA,WASI,OACE1B,EAAA,qBAAKG,UAAWlB,KAAON,MACrBqB,EAAA,wCAAkBgB,KAAKoG,MAAMzG,QAAQoB,YAArC,KACA/B,EAAA,sCAAgBgB,KAAKoG,MAAMzG,QAAQ0D,UAAnC,KACArE,EAAA,uBACEA,EAAA,uBAAO0J,KAAK,SAASpB,QAAStH,KAAKoG,MAAMpF,KAAMN,MAAM,UACrD1B,EAAA,uBAAO0J,KAAK,SAASpB,QAAStH,KAAKoG,MAAM4B,QAAStH,MAAM,gBAflE6H,EAAA,CAA0Bd,eAA1BgB,QCJaE,GAAb,SAAAxC,GAAA,SAAAwC,IAAA,OAAA7I,OAAAC,EAAA,EAAAD,CAAAE,KAAA2I,GAAA7I,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAA6I,GAAAhG,MAAA3C,KAAAmC,YAAA,OAAArC,OAAA8C,EAAA,EAAA9C,CAAA6I,EAAAxC,GAAArG,OAAAU,EAAA,EAAAV,CAAA6I,EAAA,EAAAlI,IAAA,SAAAC,MAAA,WAEI,OACE1B,EAAA,yBACEA,EAAA,cAAC4J,GAAD,MACA5J,EAAA,cAAC6J,GAAD,WALRF,EAAA,CAA8BlB,aCEjBqB,GAAb,SAAA3C,GAAA,SAAA2C,IAAA,OAAAhJ,OAAAC,EAAA,EAAAD,CAAAE,KAAA8I,GAAAhJ,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAAgJ,GAAAnG,MAAA3C,KAAAmC,YAAA,OAAArC,OAAA8C,EAAA,EAAA9C,CAAAgJ,EAAA3C,GAAArG,OAAAU,EAAA,EAAAV,CAAAgJ,EAAA,EAAArI,IAAA,SAAAC,MAAA,WAEI,OACE1B,EAAA,qBAAKG,UAAWF,IAAMvB,KACpBsB,EAAA,cAAC+J,GAAD,MACA/J,EAAA,cAACgK,GAAD,WALRF,EAAA,CAAyBrB,aCMLwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVC,gBAAMC,IAAbC,GAAA,WASE,SAAAD,IAAkC,IAAArH,EAAAjC,KAAtBwJ,EAAsBrH,UAAAC,OAAA,QAAAqC,IAAAtC,UAAA,GAAAA,UAAA,GAAH,EAAGrC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsJ,GAAAtJ,KARlByJ,SAAW,EAQOzJ,KAPlB0J,gBAAkB,EAOA1J,KAN3B2J,cAM2B,EAAA7J,OAAAG,EAAA,EAAAH,CAAAE,KAAA,mBAAA4J,GAAA5J,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,OAAA6J,GAAA7J,MAChC8J,YAAY,WACV7H,EAAK3B,iBAAmB,IAAIuC,EAAiBZ,GAAO,GAAI,GACxDA,EAAK0H,SAAW1H,EAAKyH,gBAAkBF,EACvC,IAAK,IAAI3J,EAAI,EAAGA,EAAIoC,EAAKwH,SAAU5J,IAAK,CACtCoC,EAAKmG,KAAKvI,GAAK,GACf,IAAK,IAAID,EAAI,EAAGA,EAAIqC,EAAK0H,SAAU/J,IACjCqC,EAAKmG,KAAKvI,GAAGD,GAAK,IAAIiC,EAAeI,EAAMrC,EAAGC,MAhBxD,OAAAC,OAAAU,EAAA,EAAAV,CAAAwJ,EAAA,EAAA7I,IAAA,eAAAC,MAAA,SAsBsBd,EAAWC,GAC7B,GAAIG,KAAK+J,cAAcnK,EAAGC,GACxB,MAAM,IAAIgB,MAAJ,iBAAAnC,OAA2BkB,EAA3B,MAAAlB,OAAiCmB,IAEzC,OAAOG,KAAKoI,KAAKvI,EAAI,GAAGD,EAAI,KA1BhC,CAAAa,IAAA,eAAAC,MAAA,SA8BuBd,EAAWC,EAAWoI,GACzC,GAAIjI,KAAK+J,cAAcnK,EAAGC,GACxB,MAAM,IAAIgB,MAAJ,iBAAAnC,OAA2BkB,EAA3B,MAAAlB,OAAiCmB,IAGzC,OADAG,KAAKoI,KAAKvI,EAAI,GAAGD,EAAI,GAAKqI,EACnBA,IAnCX,CAAAxH,IAAA,gBAAAC,MAAA,SAsCwBd,EAAWC,GAC/B,OAAOD,GAAK,GAAKA,EAAII,KAAK2J,UAAY9J,GAAK,GAAKA,EAAIG,KAAKyJ,WAvC7D,CAAAhJ,IAAA,mBAAAC,MAAA,SA0C0Bd,EAAWC,GACjC,GAAIG,KAAK+J,cAAcnK,EAAGC,GACxB,MAAM,IAAIgB,MAAJ,iBAAAnC,OAA2BkB,EAA3B,MAAAlB,OAAiCmB,IAEzC,OAAOG,KAAKgK,aAAapK,EAAGC,GAAGf,QA9CnC,CAAA2B,IAAA,oBAAAC,MAAA,SAkD2Bd,EAAWC,EAAW6I,GAC7C,GAAI1I,KAAK+J,cAAcnK,EAAGC,GACxB,MAAM,IAAIgB,MAAJ,iBAAAnC,OAA2BkB,EAA3B,MAAAlB,OAAiCmB,IAEzC,IAAIoI,EACJ,GAAoB,kBAATS,EAAmB,CAC5B,GAAIA,IAAS/J,EAAekE,iBAC1B,MAAM,IAAIhC,MAAM,4CAElBoH,EAAY,IAAIvC,GAAcgD,GAAM1I,KAAMJ,EAAGC,QAI7C,IADAoI,EAAY,IAAIS,EAAK1I,KAAMJ,EAAGC,IAChBf,QAAUH,EAAekE,iBACrC,MAAM,IAAIhC,MAAM,4CAIpB,OAAOb,KAAKiK,aAAarK,EAAGC,EAAGoI,KApEnC,CAAAxH,IAAA,qBAAAC,MAAA,SAuE4Bd,EAAWC,GAAyB,IAAAsH,EAAAnH,KAE5D,MADe,CAAC,CAAEJ,IAAGC,EAAGA,EAAI,GAAK,CAAED,IAAGC,EAAGA,EAAI,GAAK,CAAED,EAAGA,EAAI,EAAGC,KAAK,CAAED,EAAGA,EAAI,EAAGC,MACjE8D,OAAO,SAAAuG,GAAC,OAAK/C,EAAK4C,cAAcG,EAAEtK,EAAGsK,EAAErK,OAzEzD,CAAAY,IAAA,gBAAAC,MAAA,SA4EuBd,EAAWC,GAAwB,IAAAsK,EAAAnK,KAEtD,OADwBA,KAAKoK,mBAAmBxK,EAAGC,GAEhDuH,IAAI,SAAA8C,GAAC,OAAIC,EAAKH,aAAaE,EAAEtK,EAAGsK,EAAErK,KAClC8D,OAAO,SAAA0G,GAAI,OAAIA,EAAKvL,QAAUH,EAAekD,mBAhFpD,CAAApB,IAAA,OAAAC,MAAA,WAiGI,IAAM4J,EAAatK,KAAKsK,WACxBA,EAAWC,QAAQ,SAAAL,GAAC,OAAIA,EAAElJ,SAC1BsJ,EAAWC,QAAQ,SAAAL,GAAC,OAAIA,EAAEjJ,iBAC1BjB,KAAKM,iBAAiBW,iBApG1B,CAAAR,IAAA,UAAAC,MAAA,WAyHIV,KAAKsK,WAAWC,QAAQ,SAAAL,GAAC,OAAIA,EAAEM,YAC/BxK,KAAKM,iBAAiBkK,YA1H1B,CAAA/J,IAAA,aAAAS,IAAA,WAoFI,IAAMlD,EAAsB,GADQsG,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEpC,QAAAC,EAAAC,EAAkB3E,KAAKoI,KAAvBxD,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA6B,KAAlB0C,EAAkBtC,EAAAhE,MAAA+J,GAAA,EAAAC,GAAA,EAAAC,OAAAlG,EAAA,IAC3B,QAAAmG,EAAAC,EAAwB7D,EAAxBpC,OAAAC,cAAA4F,GAAAG,EAAAC,EAAA/F,QAAAC,MAAA0F,GAAA,EAA6B,KAAlBxC,EAAkB2C,EAAAlK,MACvBuH,EAAUnJ,QAAUH,EAAekD,gBACrC7D,EAAOG,KAAK8J,IAHW,MAAAjD,GAAA0F,GAAA,EAAAC,EAAA3F,EAAA,YAAAyF,GAAA,MAAAI,EAAA5F,QAAA4F,EAAA5F,SAAA,WAAAyF,EAAA,MAAAC,KAFO,MAAA3F,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAK,EAAAM,QAAAN,EAAAM,SAAA,WAAAV,EAAA,MAAAC,GASpC,OAAOxG,IA5FX,CAAAyC,IAAA,YAAAS,IAAA,WAwGI,OAAOlB,KAAKM,iBAAiB+C,YAxGjC,CAAA5C,IAAA,SAAAS,IAAA,WA4GI,OAAOlB,KAAKM,iBAAiB6C,SA5GjC,CAAA1C,IAAA,cAAAS,IAAA,WAgHI,OAAOlB,KAAKM,iBAAiBS,cAhHjC,CAAAN,IAAA,WAAAS,IAAA,WAoHI,OAAOlB,KAAKM,iBAAiBQ,aApHjCwI,EAAA,GAAAM,GAAA9J,OAAAuB,EAAA,EAAAvB,CAAAyJ,GAAAjI,UAAA,oBAIG9B,KAJH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAAmI,GAAA/J,OAAAuB,EAAA,EAAAvB,CAAAyJ,GAAAjI,UAAA,QAMG9B,KANH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAO+B,MAP/B5B,OAAAuB,EAAA,EAAAvB,CAAAyJ,GAAAjI,UAAA,gBA6BGK,KA7BH7B,OAAA8B,yBAAA2H,GAAAjI,UAAA,gBAAAiI,GAAAjI,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAyJ,GAAAjI,UAAA,qBAiDGK,KAjDH7B,OAAA8B,yBAAA2H,GAAAjI,UAAA,qBAAAiI,GAAAjI,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAyJ,GAAAjI,UAAA,QA+FGK,KA/FH7B,OAAA8B,yBAAA2H,GAAAjI,UAAA,QAAAiI,GAAAjI,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAyJ,GAAAjI,UAAA,WAuHGK,KAvHH7B,OAAA8B,yBAAA2H,GAAAjI,UAAA,WAAAiI,GAAAjI,WAAAiI,ICJauB,IAAbC,GAYGpJ,IAAOqJ,MAZVC,GAkBGtJ,IAAOqJ,MAlBVE,GAAA,WAKE,SAAAJ,EAAYtB,GAAmB,IAAAvH,EAAAjC,KAAAF,OAAAC,EAAA,EAAAD,CAAAE,KAAA8K,GAAAhL,OAAAG,EAAA,EAAAH,CAAAE,KAAA,UAAAmL,GAAAnL,WAFxBwG,uBAEwB,EAC7BsD,YAAY,WACV7H,EAAKtC,QAAU,IAAI2J,GAAQE,GAC3BvH,EAAKuE,kBAAoB7H,EAAekD,iBAR9C,OAAA/B,OAAAU,EAAA,EAAAV,CAAAgL,EAAA,EAAArK,IAAA,UAAAC,MAAA,WAcIV,KAAKL,QAAQ6K,UACbxK,KAAKL,QAAQqB,SAfjB,CAAAP,IAAA,OAAAC,MAAA,WAoBIV,KAAKL,QAAQqB,WApBjB8J,EAAA,GAAAK,GAAArL,OAAAuB,EAAA,EAAAvB,CAAAoL,GAAA5J,UAAA,WACG9B,KADH,CAAA+B,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAA5B,OAAAuB,EAAA,EAAAvB,CAAAoL,GAAA5J,UAAA,WAAAyJ,IAAAjL,OAAA8B,yBAAAsJ,GAAA5J,UAAA,WAAA4J,GAAA5J,WAAAxB,OAAAuB,EAAA,EAAAvB,CAAAoL,GAAA5J,UAAA,QAAA2J,IAAAnL,OAAA8B,yBAAAsJ,GAAA5J,UAAA,QAAA4J,GAAA5J,WAAA4J,ICAaE,GAAb,SAAAjF,GAGE,SAAAiF,EAAYrN,GAAW,IAAAkE,EAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoL,IACrBnJ,EAAAnC,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAAsL,GAAA1I,KAAA1C,KAAMjC,KAHSqI,WAEM,EAGrBnE,EAAKmE,MAAQ,IAAI0E,GAHI7I,EAHzB,OAAAnC,OAAA8C,EAAA,EAAA9C,CAAAsL,EAAAjF,GAAArG,OAAAU,EAAA,EAAAV,CAAAsL,EAAA,EAAA3K,IAAA,SAAAC,MAAA,WAUI,OAAO1B,EAAA,cAACqM,EAAA,EAAD,CAAUjF,MAAOpG,KAAKoG,OAAQpG,KAAKjC,MAAMuN,cAVpDF,EAAA,CAAoC3D,aCIpC8D,YAAU,CAAEC,eAAgB,WAE5BC,IAASC,OACPC,EAAAC,EAAAC,cAACC,GAAD,KACEH,EAAAC,EAAAC,cAACE,GAAD,OAEFC,SAASC,eAAe,SJ2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.865aa313.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table_grid\":\"TableGrid_table_grid__2GkxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img_component\":\"ImageComponent_img_component__2BXdO\",\"img_container\":\"ImageComponent_img_container__1Qx-W\",\"selected_high\":\"ImageComponent_selected_high__3N1Ue\",\"selected_medium\":\"ImageComponent_selected_medium__3zmZ-\",\"selected_low\":\"ImageComponent_selected_low__2TCY8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__cOkLh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Info_info__3J6KW\"};","import { ComponentBrand } from '../const/ComponentBrand';\nimport * as React from 'react';\nimport styles from './ImageComponent.module.scss';\n\n// Breaking typing? Maybe.\nexport enum ImageSelection {\n  high = 'selected_high',\n  medium = 'selected_medium',\n  low = 'selected_low'\n}\n\ninterface Props {\n  brand: ComponentBrand;\n  selected?: ImageSelection;\n  bar?: number;\n}\n\nfunction getImageURI(brand: ComponentBrand): string {\n  return 'assets/components/' + brand.toString() + '.png';\n}\n\nfunction getClassNames(props: Props) {\n  const result: string[] = [styles.img_component];\n  if (props.selected) {\n    result.push(styles[props.selected]);\n  }\n  return result.join(' ');\n}\n\nfunction getBarURI(bar: number) {\n  const id = Math.ceil(bar * 14);\n  return `assets/Bar${id < 14 ? id : 14}.png`;\n}\n\nexport const ImageComponent: React.FunctionComponent<Props> = props => {\n  const uri = getImageURI(props.brand);\n  if (uri) {\n    if (props.bar && props.bar > 0) {\n      return (\n        <div\n          style={{\n            backgroundImage: `url(${uri})`\n          }}\n          className={styles.img_container}\n        >\n          <img src={getBarURI(props.bar)} alt={props.brand} />\n        </div>\n      );\n    } else {\n      return <img src={uri} alt={props.brand} className={getClassNames(props)} />;\n    }\n  } else {\n    return null;\n  }\n};\n","export const Stores = {\n  store: 'store'\n};\n","import { EmptyComponent } from '../planner/components/EmptyComponent';\nimport { ComponentClass } from '../planner/ComponentClass';\nimport { ReactorComponent } from '../planner/components/ReactorComponent';\nimport { UraniumCellSingle } from '../planner/components/UraniumCellSingle';\nimport { CoolantCell20k } from '../planner/components/CoolantCell20k';\nimport { HeatVent } from '../planner/components/HeatVent';\nimport { UraniumCellDouble } from '../planner/components/UraniumCellDouble';\n\nexport enum ComponentBrand {\n  EmptyComponent = 'EmptyComponent',\n  ReactorComponent = 'ReactorComponent',\n  UraniumCellSingle = 'UraniumCellSingle',\n  UraniumCellDouble = 'UraniumCellDouble',\n  HeatVent = 'HeatVent',\n  CoolantCell20k = 'CoolantCell20k'\n}\n\n// It is not pretty, but Typescript is bad with handling class types\ntype TComponentDict = { [key in ComponentBrand]: ComponentClass };\n\nexport const ComponentDict: TComponentDict = {\n  [ComponentBrand.EmptyComponent]: EmptyComponent,\n  [ComponentBrand.ReactorComponent]: ReactorComponent,\n  [ComponentBrand.UraniumCellSingle]: UraniumCellSingle,\n  [ComponentBrand.UraniumCellDouble]: UraniumCellDouble,\n  [ComponentBrand.HeatVent]: HeatVent,\n  [ComponentBrand.CoolantCell20k]: CoolantCell20k\n};\n\nexport const ComponentListFiltered: ComponentBrand[] = (Object.keys(\n  ComponentDict\n) as ComponentBrand[]).filter(brand => brand !== ComponentBrand.ReactorComponent);\n","import { ComponentBrand } from '../const/ComponentBrand';\nimport { Reactor } from './Reactor';\nimport { ReactorComponent } from './components/ReactorComponent';\nimport { CoordsDict } from './Coords';\nimport { action, observable } from 'mobx';\n\nexport class Component {\n  @observable\n  public brand!: ComponentBrand;\n  @observable\n  public currentHeat: number = 0;\n  @observable\n  public nextHeat: number = 0;\n  @observable.struct\n  public coords: CoordsDict;\n\n  private reactor: Reactor;\n  protected reactorComponent: ReactorComponent;\n\n  constructor(reactor: Reactor, x: number, y: number) {\n    this.reactor = reactor;\n    this.reactorComponent = reactor.reactorComponent;\n    this.coords = { x, y };\n  }\n\n  protected get neighbours(): Component[] {\n    return this.reactor.getNeighbours(this.coords.x, this.coords.y);\n  }\n\n  @action\n  public addNextHeat(heat: number): void {\n    if (!this.isHeatable) {\n      throw new Error(`This component cannot be heated: ${this.brand.toString()}`);\n    }\n    this.nextHeat += heat;\n  }\n\n  @action\n  public lowerNextHeat(heat: number): void {\n    if (!this.isHeatable) {\n      throw new Error(`This component cannot be heated: ${this.brand.toString()}`);\n    }\n    this.nextHeat -= heat;\n  }\n\n  public get isHeatable(): boolean {\n    return this.maxHeat !== 0;\n  }\n\n  public get maxHeat(): number {\n    return 0;\n  }\n\n  public get heatRatio(): number {\n    const maxHeat = this.maxHeat;\n    return maxHeat === 0 ? 0 : this.currentHeat / maxHeat;\n  }\n\n  public get isReflector(): boolean {\n    return false;\n  }\n\n  @action\n  public finalizeTick(): void {\n    this.currentHeat += this.nextHeat;\n    this.nextHeat = 0;\n    if (this.currentHeat < 0) this.currentHeat = 0;\n  }\n\n  public tick(): void {}\n\n  @action\n  public fullTick(): void {\n    this.tick();\n    this.finalizeTick();\n  }\n\n  @action\n  public refresh() {\n    this.currentHeat = 0;\n    this.nextHeat = 0;\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action } from 'mobx';\n\nexport class EmptyComponent extends Component {\n  public brand = ComponentBrand.EmptyComponent;\n\n  @action\n  public tick(): void {}\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action, observable } from 'mobx';\n\nexport class ReactorComponent extends Component {\n  public brand = ComponentBrand.ReactorComponent;\n  @observable\n  public currentEU: number = 0;\n  @observable\n  public nextEU: number = 0;\n\n  @action\n  public tick(): void {}\n\n  protected get neighbours(): never {\n    throw new Error('There cannot be neigbours for a reactor component!');\n  }\n\n  public get maxHeat(): number {\n    return 8500;\n  }\n\n  @action\n  public addNextEU(eu: number): void {\n    this.nextEU += eu;\n  }\n\n  @action\n  public finalizeTick(): void {\n    super.finalizeTick();\n    this.currentEU += this.nextEU;\n    this.nextEU = 0;\n  }\n\n  @action\n  public refresh() {\n    super.refresh();\n    this.nextEU = 0;\n    this.currentEU = 0;\n  }\n}\n","import { ComponentBrand } from '../../../const/ComponentBrand';\nimport { action, observable } from 'mobx';\nimport { Component } from '../../Component';\n\ninterface HeatEU {\n  eu: number;\n  heat: number;\n}\n\nexport class UraniumCell extends Component {\n  @observable\n  public brand!: ComponentBrand;\n\n  protected get arity(): number {\n    throw new Error('Cannot get arity from an abstract cell');\n  }\n\n  private getEUHeat(neighbours: Component[]): HeatEU {\n    const reflectorNeighbours = neighbours.filter(n => n.isReflector);\n    const pulses = 1 + reflectorNeighbours.length + Math.floor(this.arity / 2);\n    return {\n      eu: 5 * this.arity * pulses,\n      heat: 2 * this.arity * pulses * (pulses + 1)\n    };\n  }\n\n  public get isReflector(): boolean {\n    return true;\n  }\n\n  @action\n  public tick(): void {\n    const neighbours = this.neighbours;\n    const { eu, heat } = this.getEUHeat(neighbours);\n\n    this.reactorComponent.addNextEU(eu);\n\n    const heatableNeighbours = neighbours.filter(n => n.isHeatable);\n    if (heatableNeighbours.length === 0) {\n      this.reactorComponent.addNextHeat(heat);\n    } else {\n      const heatPerNeighbour = Math.floor(heat / heatableNeighbours.length);\n      for (const neighbour of heatableNeighbours) {\n        neighbour.addNextHeat(heatPerNeighbour);\n      }\n      heatableNeighbours[0].addNextHeat(heat % heatableNeighbours.length);\n    }\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { UraniumCell } from './abstract/UraniumCell';\n\nexport class UraniumCellSingle extends UraniumCell {\n  public brand = ComponentBrand.UraniumCellSingle;\n\n  protected get arity(): number {\n    return 1;\n  }\n\n  public get isReflector(): boolean {\n    return true;\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action } from 'mobx';\n\nexport class CoolantCell20k extends Component {\n  public brand = ComponentBrand.CoolantCell20k;\n\n  public get maxHeat(): number {\n    return 10000;\n  }\n\n  @action\n  public tick(): void {}\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action } from 'mobx';\n\nexport class HeatVent extends Component {\n  public brand = ComponentBrand.HeatVent;\n\n  public get maxHeat(): number {\n    return 1000;\n  }\n\n  @action\n  public tick(): void {\n    this.lowerNextHeat(6);\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { UraniumCell } from './abstract/UraniumCell';\n\nexport class UraniumCellDouble extends UraniumCell {\n  public brand = ComponentBrand.UraniumCellDouble;\n\n  protected get arity(): number {\n    return 2;\n  }\n\n  public get isReflector(): boolean {\n    return true;\n  }\n}\n","import * as React from 'react';\nimport styles from './TableGrid.module.scss';\nimport { inject } from 'mobx-react';\nimport { Stores } from '../const/Stores';\nimport { ReactorStore, ReactorStoreProps } from '../planner/ReactorStore';\nimport { ImageComponent, ImageSelection } from './ImageComponent';\nimport { ComponentBrand, ComponentListFiltered } from '../const/ComponentBrand';\n\ninterface State {\n  selectedX: number;\n  selectedY: number;\n}\n\nfunction matrixify<T>(source: T[], count: number): T[][] {\n  const result: T[][] = [];\n  let row: T[] = [];\n  for (let i = 0; i < source.length; i++) {\n    row.push(source[i]);\n    if (i % count === count - 1) {\n      result.push(row);\n      row = [];\n    }\n  }\n  if (row.length !== 0) result.push(row);\n  return result;\n}\n\n@inject(Stores.store)\nexport class Palette extends React.Component<ReactorStoreProps, State> {\n  private store: ReactorStore;\n  private readonly brandGrid: ComponentBrand[][];\n  private readonly rowSize: number = 4;\n\n  constructor(props: ReactorStoreProps) {\n    super(props);\n    this.store = props.store!;\n    this.brandGrid = matrixify<ComponentBrand>(ComponentListFiltered, this.rowSize);\n    this.state = { selectedX: 0, selectedY: 0 };\n  }\n\n  private pickComponent = (x: number, y: number) => {\n    return () => {\n      this.store.selectedComponent = this.brandGrid[y][x];\n      this.setState({ selectedX: x, selectedY: y });\n    };\n  };\n\n  private isSelected = (x: number, y: number) => {\n    return this.state.selectedX === x && this.state.selectedY === y;\n  };\n\n  public render() {\n    return (\n      <table className={styles.table_grid}>\n        <tbody>\n          {this.brandGrid.map((row, y) => (\n            <tr key={y}>\n              {row.map((col, x) => (\n                <td key={x} onClick={this.pickComponent(x, y)}>\n                  <ImageComponent brand={col} selected={this.isSelected(x, y) ? ImageSelection.high : undefined} />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import * as React from 'react';\nimport styles from './TableGrid.module.scss';\nimport { inject, observer } from 'mobx-react';\nimport { Stores } from '../const/Stores';\nimport { ReactorStore, ReactorStoreProps } from '../planner/ReactorStore';\nimport { ImageComponent, ImageSelection } from './ImageComponent';\nimport { Component } from '../planner/Component';\n\n@inject(Stores.store)\n@observer\nexport class Grid extends React.Component<ReactorStoreProps> {\n  private store: ReactorStore;\n\n  constructor(props: ReactorStoreProps) {\n    super(props);\n    this.store = props.store!;\n  }\n\n  private changeCell = (x: number, y: number) => {\n    return () => {\n      this.store.reactor.setComponentClass(x, y, this.store.selectedComponent);\n      this.store.recount();\n    };\n  };\n\n  private getSelection(component: Component) {\n    if (component.currentHeat === 0) {\n      return undefined;\n    } else if (component.currentHeat < 50) {\n      return ImageSelection.low;\n    } else if (component.currentHeat < 200) {\n      return ImageSelection.medium;\n    } else {\n      return ImageSelection.high;\n    }\n  }\n\n  public render() {\n    return (\n      <table className={styles.table_grid}>\n        <tbody>\n          {this.store.reactor.grid.map((row, y) => (\n            <tr key={y + 1}>\n              {row.map((col, x) => (\n                <td key={x + 1} onClick={this.changeCell(x + 1, y + 1)}>\n                  <ImageComponent brand={col.brand} selected={this.getSelection(col)} bar={col.heatRatio}/>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ReactorStore, ReactorStoreProps } from '../planner/ReactorStore';\nimport { inject, observer } from 'mobx-react';\nimport { Stores } from '../const/Stores';\nimport styles from './Info.module.scss';\n\n@inject(Stores.store)\n@observer\nexport class Info extends React.Component<ReactorStoreProps> {\n  private store: ReactorStore;\n\n  constructor(props: ReactorStoreProps) {\n    super(props);\n    this.store = props.store!;\n  }\n\n  public render() {\n    return (\n      <div className={styles.info}>\n        <p>Current Heat: {this.store.reactor.currentHeat}.</p>\n        <p>Current EU: {this.store.reactor.currentEU}.</p>\n        <p>\n          <input type='button' onClick={this.store.tick} value='Tick!' />\n          <input type='button' onClick={this.store.recount} value='Reset' />\n        </p>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Grid } from './Grid';\nimport { Info } from './Info';\n\nexport class MainArea extends React.Component {\n  public render() {\n    return (\n      <div>\n        <Grid/>\n        <Info/>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport style from './App.module.css';\n\nimport { Palette } from './components/Palette';\nimport { MainArea } from './components/MainArea';\n\nexport class App extends React.Component {\n  public render() {\n    return (\n      <div className={style.app}>\n        <MainArea/>\n        <Palette/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { EmptyComponent } from './components/EmptyComponent';\nimport { Component } from './Component';\nimport { ComponentBrand, ComponentDict } from '../const/ComponentBrand';\nimport { ComponentClass } from './ComponentClass';\nimport { CoordsDict } from './Coords';\nimport { ReactorComponent } from './components/ReactorComponent';\nimport { action, observable, runInAction } from 'mobx';\n\nexport class Reactor {\n  public readonly gridRows = 6;\n  public readonly defaultGridCols = 3;\n  public gridCols!: number;\n  @observable\n  public reactorComponent!: ReactorComponent;\n  @observable\n  public grid: Component[][] = [];\n\n  constructor(chambers: number = 6) {\n    runInAction(() => {\n      this.reactorComponent = new ReactorComponent(this, -1, -1);\n      this.gridCols = this.defaultGridCols + chambers;\n      for (let y = 0; y < this.gridRows; y++) {\n        this.grid[y] = [];\n        for (let x = 0; x < this.gridCols; x++) {\n          this.grid[y][x] = new EmptyComponent(this, x, y);\n        }\n      }\n    });\n  }\n\n  public getComponent(x: number, y: number): Component {\n    if (this.isWrongCoords(x, y)) {\n      throw new Error(`Wrong coords: ${x}, ${y}`);\n    }\n    return this.grid[y - 1][x - 1];\n  }\n\n  @action\n  private setComponent(x: number, y: number, component: Component): Component {\n    if (this.isWrongCoords(x, y)) {\n      throw new Error(`Wrong coords: ${x}, ${y}`);\n    }\n    this.grid[y - 1][x - 1] = component;\n    return component;\n  }\n\n  private isWrongCoords(x: number, y: number) {\n    return x <= 0 || x > this.gridCols || y <= 0 || y > this.gridRows;\n  }\n\n  public getComponentType(x: number, y: number): ComponentBrand {\n    if (this.isWrongCoords(x, y)) {\n      throw new Error(`Wrong coords: ${x}, ${y}`);\n    }\n    return this.getComponent(x, y).brand;\n  }\n\n  @action\n  public setComponentClass(x: number, y: number, type: ComponentClass | ComponentBrand): Component {\n    if (this.isWrongCoords(x, y)) {\n      throw new Error(`Wrong coords: ${x}, ${y}`);\n    }\n    let component: Component;\n    if (typeof type === 'string') {\n      if (type === ComponentBrand.ReactorComponent) {\n        throw new Error('You cannot add reactor component to grid');\n      }\n      component = new ComponentDict[type](this, x, y);\n    } else {\n      // Hacky, but simple comparing type does not work\n      component = new type(this, x, y);\n      if (component.brand === ComponentBrand.ReactorComponent) {\n        throw new Error('You cannot add reactor component to grid');\n      }\n    }\n\n    return this.setComponent(x, y, component);\n  }\n\n  public getNeighbourCoords(x: number, y: number): CoordsDict[] {\n    const result = [{ x, y: y + 1 }, { x, y: y - 1 }, { x: x + 1, y }, { x: x - 1, y }];\n    return result.filter(c => !this.isWrongCoords(c.x, c.y));\n  }\n\n  public getNeighbours(x: number, y: number): Component[] {\n    const neighbourCoords = this.getNeighbourCoords(x, y);\n    return neighbourCoords\n      .map(c => this.getComponent(c.x, c.y))\n      .filter(comp => comp.brand !== ComponentBrand.EmptyComponent);\n  }\n\n  private get components(): Component[] {\n    const result: Component[] = [];\n    for (const row of this.grid) {\n      for (const component of row) {\n        if (component.brand !== ComponentBrand.EmptyComponent) {\n          result.push(component);\n        }\n      }\n    }\n    return result;\n  }\n\n  @action\n  public tick(): void {\n    const components = this.components;\n    components.forEach(c => c.tick());\n    components.forEach(c => c.finalizeTick());\n    this.reactorComponent.finalizeTick();\n  }\n\n  public get currentEU() {\n    return this.reactorComponent.currentEU;\n  }\n\n  public get nextEU() {\n    return this.reactorComponent.nextEU;\n  }\n\n  public get currentHeat() {\n    return this.reactorComponent.currentHeat;\n  }\n\n  public get nextHeat() {\n    return this.reactorComponent.nextHeat;\n  }\n\n  @action\n  public refresh() {\n    this.components.forEach(c => c.refresh());\n    this.reactorComponent.refresh();\n  }\n}\n","import { action, observable, runInAction } from 'mobx';\nimport { Reactor } from './Reactor';\nimport { ComponentBrand } from '../const/ComponentBrand';\n\nexport class ReactorStore {\n  @observable\n  public reactor!: Reactor;\n  public selectedComponent!: ComponentBrand;\n\n  constructor(chambers?: number) {\n    runInAction(() => {\n      this.reactor = new Reactor(chambers);\n      this.selectedComponent = ComponentBrand.EmptyComponent;\n    });\n  }\n\n  @action.bound\n  public recount() {\n    this.reactor.refresh();\n    this.reactor.tick();\n  }\n\n  @action.bound\n  public tick() {\n    this.reactor.tick();\n  }\n}\n\nexport interface ReactorStoreProps {\n  store?: ReactorStore;\n}\n","import * as React from 'react';\nimport { ReactorStore } from '../planner/ReactorStore';\nimport { Provider } from 'mobx-react';\n\nexport class StoreComponent extends React.Component<{}> {\n  private readonly store: ReactorStore;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.store = new ReactorStore();\n  }\n\n  public render() {\n    return <Provider store={this.store}>{this.props.children}</Provider>;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { configure } from 'mobx';\nimport { StoreComponent } from './components/StoreComponent';\n\nconfigure({ enforceActions: 'always' });\n\nReactDOM.render(\n  <StoreComponent>\n    <App />\n  </StoreComponent>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}