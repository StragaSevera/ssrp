{"version":3,"sources":["components/TableGrid.module.scss","components/ImageComponent.module.scss","App.module.css","components/Info.module.scss","components/ImageComponent.tsx","const/Stores.ts","const/ComponentBrand.ts","planner/Errors.ts","planner/Component.ts","planner/components/EmptyComponent.ts","planner/components/ReactorComponent.ts","planner/components/abstract/HeatingCell.ts","planner/components/abstract/HeatingMaterials.ts","planner/components/UraniumCellSingle.ts","planner/components/CoolantCell20k.ts","planner/components/HeatVent.ts","planner/components/UraniumCellDouble.ts","planner/components/UraniumCellQuad.ts","planner/components/ReactorHeatVent.ts","components/Palette.tsx","components/Grid.tsx","components/Info.tsx","components/MainArea.tsx","App.tsx","serviceWorker.ts","planner/Reactor.ts","planner/ReactorStore.ts","components/StoreComponent.tsx","index.tsx"],"names":["module","exports","table_grid","img_component","img_container","selected_high","selected_medium","selected_low","app","info","ImageSelection","Stores","getClassNames","props","result","styles","selected","push","join","getBarURI","bar","id","Math","ceil","concat","ComponentBrand","ImageComponent","uri","brand","toString","react","style","backgroundImage","className","src","alt","CoordsError","_Error","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","wrapNativeSuper","Error","ComponentError","_Error2","Component","_dec","observable","struct","_class","reactor","x","y","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","reactorComponent","coords","createClass","key","value","heat","isHeatable","nextHeat","currentHeat","tick","finalizeTick","get","getNeighbours","maxHeat","applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","EmptyComponent","EmptyComponent_class","_Component","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","ReactorComponent","ReactorComponent_class","ReactorComponent_descriptor","assertThisInitialized","ReactorComponent_descriptor2","eu","nextEU","esm_get","currentEU","HeatingCell","HeatingCell_class","HeatingCell_descriptor","neighbours","pulses","filter","n","isReflector","floor","arity","material","energyMultiplier","_this$getEUHeat","getEUHeat","addNextEU","heatableNeighbours","addNextHeat","heatPerNeighbour","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","Uranium","durationMultiplier","UraniumCellSingle","_HeatingCell","CoolantCell20k","CoolantCell20k_class","HeatVent","HeatVent_class","lowerNextHeat","UraniumCellDouble","UraniumCellQuad","ReactorHeatVent","ReactorHeatVent_class","ComponentDict","_ComponentDict","defineProperty","ComponentListFiltered","keys","Palette","inject","Palette_dec","Palette_class","_React$Component","store","brandGrid","rowSize","pickComponent","selectedComponent","setState","selectedX","selectedY","isSelected","state","source","count","row","i","matrixify","_this2","map","col","onClick","ImageComponent_ImageComponent","high","React","Grid","Grid_dec","Grid_class","observer","changeCell","setComponentClass","recount","component","low","medium","grid","getSelection","heatRatio","Info","Info_dec","Info_class","type","MainArea","Grid_Grid","Info_Info","App","MainArea_MainArea","Palette_Palette","Boolean","window","location","hostname","match","Reactor","Reactor_class","chambers","gridRows","defaultGridCols","gridCols","Reactor_descriptor","Reactor_descriptor2","runInAction","ensureGoodCoords","getComponent","setComponent","c","isWrongCoords","_this3","getNeighbourCoords","comp","components","forEach","refresh","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","ReactorStore","ReactorStore_dec","bound","_dec2","ReactorStore_class","ReactorStore_descriptor","StoreComponent","index_module","children","configure","enforceActions","ReactDOM","render","react_default","a","createElement","StoreComponent_StoreComponent","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.654e4a34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table_grid\":\"TableGrid_table_grid__YYuux\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img_component\":\"ImageComponent_img_component__3e6zZ\",\"img_container\":\"ImageComponent_img_container__m4F9B\",\"selected_high\":\"ImageComponent_selected_high__y4VUD\",\"selected_medium\":\"ImageComponent_selected_medium__oP6j5\",\"selected_low\":\"ImageComponent_selected_low___PASf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Info_info__2Hz0p\"};","import { ComponentBrand } from '../const/ComponentBrand';\nimport * as React from 'react';\nimport styles from './ImageComponent.module.scss';\n\n// Breaking typing? Maybe.\nexport enum ImageSelection {\n  high = 'selected_high',\n  medium = 'selected_medium',\n  low = 'selected_low'\n}\n\ninterface Props {\n  brand: ComponentBrand;\n  selected?: ImageSelection;\n  bar?: number;\n}\n\nfunction getImageURI(brand: ComponentBrand): string {\n  return 'assets/components/' + brand.toString() + '.png';\n}\n\nfunction getClassNames(props: Props) {\n  const result: string[] = [styles.img_component];\n  if (props.selected) {\n    result.push(styles[props.selected]);\n  }\n  return result.join(' ');\n}\n\nfunction getBarURI(bar: number) {\n  const id = Math.ceil(bar * 14);\n  return `assets/Bar${id < 14 ? id : 14}.png`;\n}\n\nexport const ImageComponent: React.FunctionComponent<Props> = props => {\n  const uri = getImageURI(props.brand);\n  if (uri) {\n    if (props.bar && props.bar > 0) {\n      return (\n        <div\n          style={{\n            backgroundImage: `url(${uri})`\n          }}\n          className={styles.img_container}\n        >\n          <img src={getBarURI(props.bar)} alt={props.brand} />\n        </div>\n      );\n    } else {\n      return <img src={uri} alt={props.brand} className={getClassNames(props)} />;\n    }\n  } else {\n    return null;\n  }\n};\n","export const Stores = {\n  store: 'store'\n};\n","import { EmptyComponent } from '../planner/components/EmptyComponent';\nimport { ComponentClass } from '../planner/ComponentClass';\nimport { ReactorComponent } from '../planner/components/ReactorComponent';\nimport { UraniumCellSingle } from '../planner/components/UraniumCellSingle';\nimport { CoolantCell20k } from '../planner/components/CoolantCell20k';\nimport { HeatVent } from '../planner/components/HeatVent';\nimport { UraniumCellDouble } from '../planner/components/UraniumCellDouble';\nimport { UraniumCellQuad } from '../planner/components/UraniumCellQuad';\nimport { ReactorHeatVent } from '../planner/components/ReactorHeatVent';\n\nexport enum ComponentBrand {\n  EmptyComponent = 'EmptyComponent',\n  ReactorComponent = 'ReactorComponent',\n  UraniumCellSingle = 'UraniumCellSingle',\n  UraniumCellDouble = 'UraniumCellDouble',\n  UraniumCellQuad = 'UraniumCellQuad',\n  HeatVent = 'HeatVent',\n  ReactorHeatVent = 'ReactorHeatVent',\n  CoolantCell20k = 'CoolantCell20k'\n}\n\n// It is not pretty, but Typescript is bad with handling class types\ntype TComponentDict = { [key in ComponentBrand]: ComponentClass };\n\nexport const ComponentDict: TComponentDict = {\n  [ComponentBrand.EmptyComponent]: EmptyComponent,\n  [ComponentBrand.ReactorComponent]: ReactorComponent,\n  [ComponentBrand.UraniumCellSingle]: UraniumCellSingle,\n  [ComponentBrand.UraniumCellDouble]: UraniumCellDouble,\n  [ComponentBrand.UraniumCellQuad]: UraniumCellQuad,\n  [ComponentBrand.HeatVent]: HeatVent,\n  [ComponentBrand.ReactorHeatVent]: ReactorHeatVent,\n  [ComponentBrand.CoolantCell20k]: CoolantCell20k\n};\n\nexport const ComponentListFiltered: ComponentBrand[] = (Object.keys(\n  ComponentDict\n) as ComponentBrand[]).filter(brand => brand !== ComponentBrand.ReactorComponent);\n","/* tslint:disable:max-classes-per-file */\nexport class CoordsError extends Error {\n}\n\nexport class ComponentError extends Error {\n}\n","import { ComponentBrand } from '../const/ComponentBrand';\nimport { Reactor } from './Reactor';\nimport { ReactorComponent } from './components/ReactorComponent';\nimport { CoordsDict } from './Coords';\nimport { action, observable } from 'mobx';\nimport { ComponentError } from './Errors';\n\nexport abstract class Component {\n  @observable\n  public brand!: ComponentBrand;\n  @observable\n  public currentHeat: number = 0;\n  @observable\n  public nextHeat: number = 0;\n  @observable.struct\n  public coords: CoordsDict;\n\n  private reactor: Reactor;\n  protected reactorComponent: ReactorComponent;\n\n  constructor(reactor: Reactor, x: number, y: number) {\n    this.reactor = reactor;\n    this.reactorComponent = reactor.reactorComponent;\n    this.coords = { x, y };\n  }\n\n  protected get neighbours(): Component[] {\n    return this.reactor.getNeighbours(this.coords.x, this.coords.y);\n  }\n\n  public get isHeatable(): boolean {\n    return this.maxHeat !== 0;\n  }\n\n  public get maxHeat(): number {\n    return 0;\n  }\n\n  @action\n  public addNextHeat(heat: number): void {\n    if (!this.isHeatable) {\n      throw new ComponentError(`This component cannot be heated: ${this.brand.toString()}`);\n    }\n    this.nextHeat += heat;\n  }\n\n  @action\n  public lowerNextHeat(heat: number): void {\n    if (!this.isHeatable) {\n      throw new ComponentError(`This component cannot be heated: ${this.brand.toString()}`);\n    }\n    this.nextHeat -= heat;\n  }\n\n  @action\n  public refresh() {\n    this.currentHeat = 0;\n    this.nextHeat = 0;\n  }\n\n  public get heatRatio(): number {\n    const maxHeat = this.maxHeat;\n    return maxHeat === 0 ? 0 : this.currentHeat / maxHeat;\n  }\n\n  public get isReflector(): boolean {\n    return false;\n  }\n\n  @action\n  public finalizeTick(): void {\n    this.currentHeat += this.nextHeat;\n    this.nextHeat = 0;\n    if (this.currentHeat < 0) this.currentHeat = 0;\n  }\n\n  public abstract tick(): void;\n\n  @action\n  public fullTick(): void {\n    this.tick();\n    this.finalizeTick();\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action } from 'mobx';\n\nexport class EmptyComponent extends Component {\n  public brand = ComponentBrand.EmptyComponent;\n\n  @action\n  public tick(): void {}\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action, observable } from 'mobx';\n\nexport class ReactorComponent extends Component {\n  public brand = ComponentBrand.ReactorComponent;\n  @observable\n  public currentEU: number = 0;\n  @observable\n  public nextEU: number = 0;\n\n  @action\n  public tick(): void {}\n\n  protected get neighbours(): never {\n    throw new Error('There cannot be neigbours for a reactor component!');\n  }\n\n  public get maxHeat(): number {\n    return 8500;\n  }\n\n  @action\n  public addNextEU(eu: number): void {\n    this.nextEU += eu;\n  }\n\n  @action\n  public finalizeTick(): void {\n    super.finalizeTick();\n    this.currentEU += this.nextEU;\n    this.nextEU = 0;\n  }\n\n  @action\n  public refresh() {\n    super.refresh();\n    this.nextEU = 0;\n    this.currentEU = 0;\n  }\n}\n","import { ComponentBrand } from '../../../const/ComponentBrand';\nimport { action, observable } from 'mobx';\nimport { Component } from '../../Component';\nimport { HeatingMaterial } from './HeatingMaterials';\n\ninterface HeatEU {\n  eu: number;\n  heat: number;\n}\n\nexport abstract class HeatingCell extends Component {\n  @observable\n  public brand!: ComponentBrand;\n\n  protected abstract get arity(): number;\n  protected abstract get material(): HeatingMaterial;\n\n  private getEUHeat(neighbours: Component[]): HeatEU {\n    const reflectorNeighbours = neighbours.filter(n => n.isReflector);\n    const pulses = 1 + reflectorNeighbours.length + Math.floor(this.arity / 2);\n    return {\n      eu: this.material.energyMultiplier * this.arity * pulses,\n      heat: 2 * this.arity * pulses * (pulses + 1)\n    };\n  }\n\n  public get isReflector(): boolean {\n    return true;\n  }\n\n  @action\n  public tick(): void {\n    const neighbours = this.neighbours;\n    const { eu, heat } = this.getEUHeat(neighbours);\n\n    this.reactorComponent.addNextEU(eu);\n\n    const heatableNeighbours = neighbours.filter(n => n.isHeatable);\n    if (heatableNeighbours.length === 0) {\n      this.reactorComponent.addNextHeat(heat);\n    } else {\n      const heatPerNeighbour = Math.floor(heat / heatableNeighbours.length);\n      for (const neighbour of heatableNeighbours) {\n        neighbour.addNextHeat(heatPerNeighbour);\n      }\n      heatableNeighbours[0].addNextHeat(heat % heatableNeighbours.length);\n    }\n  }\n}\n","export interface HeatingMaterial {\n  energyMultiplier: number;\n  durationMultiplier: number;\n}\n\nexport const Uranium: HeatingMaterial = {\n  energyMultiplier: 5,\n  durationMultiplier: 1\n};\n\nexport const Thorium: HeatingMaterial = {\n  energyMultiplier: 1,\n  durationMultiplier: 5\n};\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { HeatingCell } from './abstract/HeatingCell';\nimport { HeatingMaterial, Uranium } from './abstract/HeatingMaterials';\n\nexport class UraniumCellSingle extends HeatingCell {\n  public brand = ComponentBrand.UraniumCellSingle;\n\n  protected get arity(): number {\n    return 1;\n  }\n\n  protected get material(): HeatingMaterial {\n    return Uranium;\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action } from 'mobx';\n\nexport class CoolantCell20k extends Component {\n  public brand = ComponentBrand.CoolantCell20k;\n\n  public get maxHeat(): number {\n    return 20000;\n  }\n\n  @action\n  public tick(): void {}\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action } from 'mobx';\n\nexport class HeatVent extends Component {\n  public brand = ComponentBrand.HeatVent;\n\n  public get maxHeat(): number {\n    return 1000;\n  }\n\n  @action\n  public tick(): void {\n    this.lowerNextHeat(6);\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { HeatingCell } from './abstract/HeatingCell';\nimport { HeatingMaterial, Uranium } from './abstract/HeatingMaterials';\n\nexport class UraniumCellDouble extends HeatingCell {\n  public brand = ComponentBrand.UraniumCellDouble;\n\n  protected get arity(): number {\n    return 2;\n  }\n\n  protected get material(): HeatingMaterial {\n    return Uranium;\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { HeatingCell } from './abstract/HeatingCell';\nimport { HeatingMaterial, Uranium } from './abstract/HeatingMaterials';\n\nexport class UraniumCellQuad extends HeatingCell {\n  public brand = ComponentBrand.UraniumCellQuad;\n\n  protected get arity(): number {\n    return 4;\n  }\n\n  protected get material(): HeatingMaterial {\n    return Uranium;\n  }\n}\n","import { ComponentBrand } from '../../const/ComponentBrand';\nimport { Component } from '../Component';\nimport { action } from 'mobx';\n\nexport class ReactorHeatVent extends Component {\n  public brand = ComponentBrand.ReactorHeatVent;\n\n  public get maxHeat(): number {\n    return 1000;\n  }\n\n  @action\n  public tick(): void {\n    this.reactorComponent.lowerNextHeat(5);\n    this.lowerNextHeat(5);\n  }\n}\n","import * as React from 'react';\nimport styles from './TableGrid.module.scss';\nimport { inject } from 'mobx-react';\nimport { Stores } from '../const/Stores';\nimport { ReactorStore, ReactorStoreProps } from '../planner/ReactorStore';\nimport { ImageComponent, ImageSelection } from './ImageComponent';\nimport { ComponentBrand, ComponentListFiltered } from '../const/ComponentBrand';\n\ninterface State {\n  selectedX: number;\n  selectedY: number;\n}\n\nfunction matrixify<T>(source: T[], count: number): T[][] {\n  const result: T[][] = [];\n  let row: T[] = [];\n  for (let i = 0; i < source.length; i++) {\n    row.push(source[i]);\n    if (i % count === count - 1) {\n      result.push(row);\n      row = [];\n    }\n  }\n  if (row.length !== 0) result.push(row);\n  return result;\n}\n\n@inject(Stores.store)\nexport class Palette extends React.Component<ReactorStoreProps, State> {\n  private store: ReactorStore;\n  private readonly brandGrid: ComponentBrand[][];\n  private readonly rowSize: number = 4;\n\n  constructor(props: ReactorStoreProps) {\n    super(props);\n    this.store = props.store!;\n    this.brandGrid = matrixify<ComponentBrand>(ComponentListFiltered, this.rowSize);\n    this.state = { selectedX: 0, selectedY: 0 };\n  }\n\n  private pickComponent = (x: number, y: number) => {\n    return () => {\n      this.store.selectedComponent = this.brandGrid[y][x];\n      this.setState({ selectedX: x, selectedY: y });\n    };\n  };\n\n  private isSelected = (x: number, y: number) => {\n    return this.state.selectedX === x && this.state.selectedY === y;\n  };\n\n  public render() {\n    return (\n      <table className={styles.table_grid}>\n        <tbody>\n          {this.brandGrid.map((row, y) => (\n            <tr key={y}>\n              {row.map((col, x) => (\n                <td key={x} onClick={this.pickComponent(x, y)}>\n                  <ImageComponent brand={col} selected={this.isSelected(x, y) ? ImageSelection.high : undefined} />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import * as React from 'react';\nimport styles from './TableGrid.module.scss';\nimport { inject, observer } from 'mobx-react';\nimport { Stores } from '../const/Stores';\nimport { ReactorStore, ReactorStoreProps } from '../planner/ReactorStore';\nimport { ImageComponent, ImageSelection } from './ImageComponent';\nimport { Component } from '../planner/Component';\n\n@inject(Stores.store)\n@observer\nexport class Grid extends React.Component<ReactorStoreProps> {\n  private store: ReactorStore;\n\n  constructor(props: ReactorStoreProps) {\n    super(props);\n    this.store = props.store!;\n  }\n\n  private changeCell = (x: number, y: number) => {\n    return () => {\n      this.store.reactor.setComponentClass(x, y, this.store.selectedComponent);\n      this.store.recount();\n    };\n  };\n\n  private getSelection(component: Component) {\n    if (component.currentHeat === 0) {\n      return undefined;\n    } else if (component.currentHeat < 50) {\n      return ImageSelection.low;\n    } else if (component.currentHeat < 200) {\n      return ImageSelection.medium;\n    } else {\n      return ImageSelection.high;\n    }\n  }\n\n  public render() {\n    return (\n      <table className={styles.table_grid}>\n        <tbody>\n          {this.store.reactor.grid.map((row, y) => (\n            <tr key={y + 1}>\n              {row.map((col, x) => (\n                <td key={x + 1} onClick={this.changeCell(x + 1, y + 1)}>\n                  <ImageComponent brand={col.brand} selected={this.getSelection(col)} bar={col.heatRatio}/>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ReactorStore, ReactorStoreProps } from '../planner/ReactorStore';\nimport { inject, observer } from 'mobx-react';\nimport { Stores } from '../const/Stores';\nimport styles from './Info.module.scss';\n\n@inject(Stores.store)\n@observer\nexport class Info extends React.Component<ReactorStoreProps> {\n  private store: ReactorStore;\n\n  constructor(props: ReactorStoreProps) {\n    super(props);\n    this.store = props.store!;\n  }\n\n  public render() {\n    return (\n      <div className={styles.info}>\n        <p>Current Heat: {this.store.reactor.currentHeat}.</p>\n        <p>Current EU: {this.store.reactor.currentEU}.</p>\n        <p>\n          <input type='button' onClick={this.store.tick} value='Tick!' />\n          <input type='button' onClick={this.store.recount} value='Reset' />\n        </p>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Grid } from './Grid';\nimport { Info } from './Info';\n\nexport class MainArea extends React.Component {\n  public render() {\n    return (\n      <div>\n        <Grid/>\n        <Info/>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport style from './App.module.css';\n\nimport { Palette } from './components/Palette';\nimport { MainArea } from './components/MainArea';\n\nexport class App extends React.Component {\n  public render() {\n    return (\n      <div className={style.app}>\n        <MainArea/>\n        <Palette/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { EmptyComponent } from './components/EmptyComponent';\nimport { Component } from './Component';\nimport { ComponentBrand, ComponentDict } from '../const/ComponentBrand';\nimport { ComponentClass } from './ComponentClass';\nimport { CoordsDict } from './Coords';\nimport { ReactorComponent } from './components/ReactorComponent';\nimport { action, observable, runInAction } from 'mobx';\nimport { ComponentError, CoordsError } from './Errors';\n\nexport class Reactor {\n  public readonly gridRows = 6;\n  public readonly defaultGridCols = 3;\n  public gridCols!: number;\n  @observable\n  public reactorComponent!: ReactorComponent;\n  @observable\n  public grid: Component[][] = [];\n\n  constructor(chambers: number = 6) {\n    runInAction(() => {\n      this.reactorComponent = new ReactorComponent(this, -1, -1);\n      this.gridCols = this.defaultGridCols + chambers;\n      for (let y = 0; y < this.gridRows; y++) {\n        this.grid[y] = [];\n        for (let x = 0; x < this.gridCols; x++) {\n          this.grid[y][x] = new EmptyComponent(this, x, y);\n        }\n      }\n    });\n  }\n\n  public getComponent(x: number, y: number): Component {\n    this.ensureGoodCoords(x, y);\n    return this.grid[y - 1][x - 1];\n  }\n\n  @action\n  private setComponent(x: number, y: number, component: Component): Component {\n    this.ensureGoodCoords(x, y);\n    this.grid[y - 1][x - 1] = component;\n    return component;\n  }\n\n  public getComponentType(x: number, y: number): ComponentBrand {\n    this.ensureGoodCoords(x, y);\n    return this.getComponent(x, y).brand;\n  }\n\n  @action\n  public setComponentClass(x: number, y: number, type: ComponentClass | ComponentBrand): Component {\n    this.ensureGoodCoords(x, y);\n    let component: Component;\n    if (typeof type === 'string') {\n      if (type === ComponentBrand.ReactorComponent) {\n        throw new ComponentError('You cannot add reactor component to grid');\n      }\n      component = new ComponentDict[type](this, x, y);\n    } else {\n      // Hacky, but simple comparing type does not work\n      component = new type(this, x, y);\n      if (component.brand === ComponentBrand.ReactorComponent) {\n        throw new ComponentError('You cannot add reactor component to grid');\n      }\n    }\n\n    return this.setComponent(x, y, component);\n  }\n\n  public getNeighbourCoords(x: number, y: number): CoordsDict[] {\n    const result = [{ x, y: y + 1 }, { x, y: y - 1 }, { x: x + 1, y }, { x: x - 1, y }];\n    return result.filter(c => !this.isWrongCoords(c.x, c.y));\n  }\n\n  public getNeighbours(x: number, y: number): Component[] {\n    const neighbourCoords = this.getNeighbourCoords(x, y);\n    return neighbourCoords\n      .map(c => this.getComponent(c.x, c.y))\n      .filter(comp => comp.brand !== ComponentBrand.EmptyComponent);\n  }\n\n  private isWrongCoords(x: number, y: number) {\n    return x <= 0 || x > this.gridCols || y <= 0 || y > this.gridRows;\n  }\n\n  private ensureGoodCoords(x: number, y: number) {\n    if (this.isWrongCoords(x, y)) {\n      throw new CoordsError(`Wrong coords: ${x}, ${y}`);\n    }\n  }\n\n  private get components(): Component[] {\n    const result: Component[] = [];\n    for (const row of this.grid) {\n      for (const component of row) {\n        if (component.brand !== ComponentBrand.EmptyComponent) {\n          result.push(component);\n        }\n      }\n    }\n    return result;\n  }\n\n  @action\n  public tick(): void {\n    const components = this.components;\n    components.forEach(c => c.tick());\n    components.forEach(c => c.finalizeTick());\n    this.reactorComponent.finalizeTick();\n  }\n\n  public get currentEU() {\n    return this.reactorComponent.currentEU;\n  }\n\n  public get nextEU() {\n    return this.reactorComponent.nextEU;\n  }\n\n  public get currentHeat() {\n    return this.reactorComponent.currentHeat;\n  }\n\n  public get nextHeat() {\n    return this.reactorComponent.nextHeat;\n  }\n\n  @action\n  public refresh() {\n    this.components.forEach(c => c.refresh());\n    this.reactorComponent.refresh();\n  }\n}\n","import { action, observable, runInAction } from 'mobx';\nimport { Reactor } from './Reactor';\nimport { ComponentBrand } from '../const/ComponentBrand';\n\nexport class ReactorStore {\n  @observable\n  public reactor!: Reactor;\n  public selectedComponent!: ComponentBrand;\n\n  constructor(chambers?: number) {\n    runInAction(() => {\n      this.reactor = new Reactor(chambers);\n      this.selectedComponent = ComponentBrand.EmptyComponent;\n    });\n  }\n\n  @action.bound\n  public recount() {\n    this.reactor.refresh();\n    this.reactor.tick();\n  }\n\n  @action.bound\n  public tick() {\n    this.reactor.tick();\n  }\n}\n\nexport interface ReactorStoreProps {\n  store?: ReactorStore;\n}\n","import * as React from 'react';\nimport { ReactorStore } from '../planner/ReactorStore';\nimport { Provider } from 'mobx-react';\n\nexport class StoreComponent extends React.Component<{}> {\n  private readonly store: ReactorStore;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.store = new ReactorStore();\n  }\n\n  public render() {\n    return <Provider store={this.store}>{this.props.children}</Provider>;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { configure } from 'mobx';\nimport { StoreComponent } from './components/StoreComponent';\n\nconfigure({ enforceActions: 'always' });\n\nReactDOM.render(\n  <StoreComponent>\n    <App />\n  </StoreComponent>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}